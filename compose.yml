volumes:
  mongodb_data: { driver: local }
  rocket: 
  uploads:
  redis_data:
  grafana_data:
  hubot:
  prometheus:
  json-exports:
  provider:
  datasources:

networks:
  rocket-net:
    driver: bridge  

services:
  rocketchat:
    image: registry.rocket.chat/rocketchat/rocket.chat:${RELEASE:-latest}
    container_name: rocketchat
    restart: always
    environment:
      MONGO_URL: "${MONGO_URL:-\
        mongodb://${MONGODB_ADVERTISED_HOSTNAME:-mongodb}:${MONGODB_INITIAL_PRIMARY_PORT_NUMBER:-27017}/\
        ${MONGODB_DATABASE:-rocketchat}?replicaSet=${MONGODB_REPLICA_SET_NAME:-rs0}}"
      MONGO_OPLOG_URL: "${MONGO_OPLOG_URL:\
        -mongodb://${MONGODB_ADVERTISED_HOSTNAME:-mongodb}:${MONGODB_INITIAL_PRIMARY_PORT_NUMBER:-27017}/\
        local?replicaSet=${MONGODB_REPLICA_SET_NAME:-rs0}}"
      ROOT_URL: ${ROOT_URL:-http://localhost:${HOST_PORT:-3000}}
      PORT: ${PORT:-3000}
      DEPLOY_METHOD: docker
      DEPLOY_PLATFORM: ${DEPLOY_PLATFORM:-}
      REG_TOKEN: ${REG_TOKEN:-}
      PUBLIC_MEDIA_URL: ${ROOT_URL:-http://localhost:${HOST_PORT:-3000}}  # Replace with your domain if using external storage
      ENABLE_INVITES: true  # Enable user invitations (optional)
      ENABLE_REGISTRATION: true  # Enable user registration (optional)
      GOOGLE_OAUTH: true
      GOOGLE_OAUTH_ID: ${GOOGLE_OAUTH_ID:-946670882701-dkrm07nuhk66i8krghn98n4phkih49v5.apps.googleusercontent.com}
      GOOGLE_OAUTH_SECRET: ${GOOGLE_OAUTH_SECRET:-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}
      GOOGLE_OAUTH_WHITELISTED_DOMAINS: ${GOOGLE_OAUTH_WHITELISTED_DOMAINS:-rocketchat.shuttlers.africa}
      ADMIN_USERNAME: ${ADMIN_USERNAME:-itsupport@shuttlers.ng}
      ADMIN_NAME: ${ADMIN_NAME:-itsupport@shuttlers.ng}
      ADMIN_EMAIL: ${ADMIN_EMAIL:-itsupport@shuttlers.ng}
    volumes:
      - ./rocket:/app
      - ./rocket/uploads:/app/uploads
    depends_on:
      - mongodb
      - rocket-redis
    expose:
      - ${PORT:-3000}
    ports:
      - "${BIND_IP:-0.0.0.0}:${HOST_PORT:-3000}:${PORT:-3000}"
    networks:
      - rocket-net

  mongodb:
    image: docker.io/bitnami/mongodb:${MONGODB_VERSION:-5.0}
    container_name: mongodb
    restart: always
    volumes:
      - mongodb_data:/bitnami/mongodb
    environment:
      MONGODB_REPLICA_SET_MODE: primary
      MONGODB_REPLICA_SET_NAME: ${MONGODB_REPLICA_SET_NAME:-rs0}
      MONGODB_PORT_NUMBER: ${MONGODB_PORT_NUMBER:-27017}
      MONGODB_INITIAL_PRIMARY_HOST: ${MONGODB_INITIAL_PRIMARY_HOST:-mongodb}
      MONGODB_INITIAL_PRIMARY_PORT_NUMBER: ${MONGODB_INITIAL_PRIMARY_PORT_NUMBER:-27017}
      MONGODB_ADVERTISED_HOSTNAME: ${MONGODB_ADVERTISED_HOSTNAME:-mongodb}
      MONGODB_ENABLE_JOURNAL: ${MONGODB_ENABLE_JOURNAL:-true}
      ALLOW_EMPTY_PASSWORD: ${ALLOW_EMPTY_PASSWORD:-yes}
    networks:
      - rocket-net
    healthcheck:
      test: test $$(mongosh --port 27017 --quiet --eval "try {rs.initiate({_id:'rs0',members:[{_id:0,host:\"mongodb:27017\"}]})} catch(e) {rs.status().ok}") -eq 1
      interval: 30s
      timeout: 10s
      retries: 3

  # Hubot for Automation and ChatOps
  hubot:
    image: rocketchat/hubot-rocketchat:latest
    container_name: hubot
    restart: always
    environment:
      # - ROCKETCHAT_ROOM=
      - ROCKETCHAT_URL=ws://localhost:3000/websocket
      - ROCKETCHAT_USER=superman
      - ROCKETCHAT_PASSWORD=passsuperwordman
      - HUBOT_NAME=superman
      - HUBOT_OWNER=shuttlers
      - LISTEN_ON_ALL_PUBLIC=true
      - EXTERNAL_SCRIPTS=hubot-help,hubot-seen,hubot-links
    volumes:
      - ./hubot:/app/hubot
    depends_on:
      - rocketchat
    networks:
      - rocket-net

  rocket-redis:
    image: redis:7.0.5-alpine
    container_name: rocket-redis
    restart: always
    volumes:
      - ./redis_data:/app/data/redis
    ports:
      - '127.0.0.1:7378:6379'
    environment:
     - REDIS_REPLICATION_MODE=master
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 5s
      timeout: 5s
      retries: 10 
    networks:
      - rocket-net

  nats:
    image: nats:2.6-alpine
    container_name: nats
    networks:
      - rocket-net

  cadvisor:
    container_name: cadvisor
    image: gcr.io/cadvisor/cadvisor:latest
    networks:
      - rocket-net  
    ports:
      - "8084:8080"
    volumes: 
      - "/:/rootfs"
      - "/var/run:/var/run"
      - "/sys:/sys"
      - "/var/lib/docker/:/var/lib/docker"
      - "/dev/disk/:/dev/disk"
    privileged: true
    devices: 
      - "/dev/kmsg"

  prometheus:
    container_name: prometheus
    image: quay.io/prometheus/prometheus:v2.16.0
    restart: unless-stopped
    networks:
      - rocket-net
    ports:
     - 9595:9090
    command:
      - --config.file=/etc/prometheus/prometheus.yml
      - '--storage.tsdb.retention.time=12w'
      - '--storage.tsdb.path=/prometheus'
    volumes:
      - ./data/prometheus:/prometheus
      - ./config/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml:ro
    depends_on:
      - cadvisor

  grafana:
    container_name: grafana
    image: grafana/grafana:6.6.2
    networks:
      - rocket-net
    restart: unless-stopped
    ports:
      - 3111:3000
    volumes:
      - ./config/grafana/provisioning/datasources:/etc/grafana/provisioning/datasources:ro
      - ./config/grafana/provisioning/dashboards/provider:/etc/grafana/provisioning/dashboards:ro
      - ./config/grafana/provisioning/dashboards/json-exports:/var/lib/grafana/dashboards:ro
    depends_on:
      - prometheus 
